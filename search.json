[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSP Lecture Notes",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "01_Intro.html",
    "href": "01_Intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "04_FourierTransform.html#example-a-sinusoidal-signal",
    "href": "04_FourierTransform.html#example-a-sinusoidal-signal",
    "title": "2  DTFT and DFT",
    "section": "2.1 Example: a sinusoidal signal",
    "text": "2.1 Example: a sinusoidal signal\nConsider a cosine signal: \\[x(t) = \\cos(2 \\pi f n)\\] with \\(f = 0.01\\)\nThis is how the signal looks like:\n\n# Create the signal\nf = 0.02\nN = 30\n#fmax = fmax * (N-10)/N\nn = np.arange(N)\nx = np.cos(2*np.pi*f*n)\n\n# Plot the signal\nplt.figure(figsize=(6, 3))\nplt.plot(x, '-o')\nplt.title('The signal $x(t) = \\cos(2 \\pi f n)$')\nplt.xlabel('Discrete time $n$')\nplt.ylabel('Signal $x[n]$')\nplt.show()\n\n\n\n\n\n\n\n\nNow let’s compute the Discrete-Time Fourier transform. This assumes that the signal is infinitely long.\nIf the cosine signal would be infinitely long, the DTFT contains only two Dirac impulses at the corresponding frequency.\n\n# Regenerate the signal so that it fits in one period\nperiod = 10000*f\nninf = np.arange(period)\nxinf = np.cos(2*np.pi*f*ninf)\n\n# Compute the DTFT\nSinf = fft(xinf)\n\n# Create the frequency axis\nfreqinf = np.linspace(fmin, fmax, len(Sinf))\n\n# Plot the magnitude of the DTFT\nplt.figure(figsize=(6, 3))\nplt.title('DTFT of infinitely-long periodic signal')\nplt.stem(freqinf, np.abs(Sinf), linefmt='b')\nplt.xlabel('Frequency')\nplt.ylabel('Magnitude')\nplt.show()\n\n\n\n\n\n\n\n\nIf the signal is assumed to be only the segment we defined, and is surrounded by infinitely-long zeros, i.e. a truncated cosine, then the spectrum is convoluted with the spectrum of a rectangular window, and the DTFT looks as follows:\n\n# Compute the DTFT\nFFT_points = 10000*n.size\nS1 = fft(x, FFT_points)\n\n# Create the frequency axis\nfreq1 = np.linspace(fmin, fmax, len(S1))\n\n# Plot the magnitude of the DTFT\nplt.figure(figsize=(6, 3))\nplt.title('DTFT of windowed signal')\nplt.plot(freq1, np.abs(S1), 'b')\n#plt.stem(freqinf, np.abs(Sinf), 'b')\nplt.xlabel('Frequency')\nplt.ylabel('Magnitude')\nplt.show()\n\n\n\n\n\n\n\n\nWhen computing the Discrete Fourier Transform (DFT), this assumes that the given piece of the signal is would be repeated periodically. The DFT is not continous, it is discrete.\n\n# Compute the DFT\nS2 = fft(x)\n\n# Create the frequency axis\nfreq2 = np.linspace(fmin, fmax, len(S2))\n#freq2 = np.fft.fftfreq(x.size)\n\n# Plot the magnitude of the DTFT\nplt.figure(figsize=(6, 3))\nplt.title('Its DFT')\nplt.stem(freq2, np.abs(S2), linefmt='ro')\nplt.xlabel('Frequency')\nplt.ylabel('Magnitude')\nplt.show()\n\n\n\n\n\n\n\n\nThe DFT is just sampled from the DTFT:\n\n# Plot the DTFT and DFT overlaid\nfreq2 = np.linspace(fmin, fmax, len(S2)+1)\nplt.figure(figsize=(6, 3))\nplt.plot(freq1, np.abs(S1), 'b')\nplt.stem(freq2[:-1], np.abs(S2), linefmt='ro')\nplt.title('The DFT is just sampled from the DTFT')\nplt.xlabel('Frequency')\nplt.ylabel('Magnitude')\nplt.show()"
  },
  {
    "objectID": "04_FourierTransform.html#example-rectangle-pulse",
    "href": "04_FourierTransform.html#example-rectangle-pulse",
    "title": "2  DTFT and DFT",
    "section": "2.2 Example: rectangle pulse",
    "text": "2.2 Example: rectangle pulse\nConsider a rectangle pulse signal as below:\n\n# Create the signal\nlen_1 = 100\nlen_0 = 100\nx = np.hstack((np.ones(len_1), np.zeros(len_1)))\nx = np.hstack((x, x))\n\n# Plot the signal\nplt.figure()\nplt.plot(x)\nplt.xlabel('Discrete time $n$')\nplt.ylabel('Signal $x[n]$')\nplt.show()\n\n\n\n\n\n\n\n\nThe DTFT is:\n\n# Compute the DTFT of the rectangle window\nFFT_points = 2000\nW = fft(x, FFT_points)\n\n# Create the frequency axis\nfreq = np.linspace(fmin, fmax, len(W))\n\n# Plot the magnitude of the DTFT\nplt.figure()\nplt.plot(freq, np.abs(W))\nplt.xlabel('Frequency')\nplt.ylabel('Magnitude')\nplt.show()"
  },
  {
    "objectID": "Shiny.html",
    "href": "Shiny.html",
    "title": "3  Shinylive in Quarto example",
    "section": "",
    "text": "This is a Shinylive application embedded in a Quarto doc.\n#| standalone: true\n#| viewerHeight: 2000\n# components: [editor, viewer]\n#| components: [viewer]\n#| layout: vertical\n\nfrom shiny import *\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfft = np.fft.fft\nfmin, fmax = 0, 1\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"freq\", \"Frequency\", 0, 0.5, 0.1, step=0.001),\n            ui.input_slider(\"N\", \"Length\", 10, 200, 30, step=1),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"plot_signal\"),\n            #ui.output_plot(\"plot_DTFT_per\"),\n            ui.output_plot(\"plot_DTFT_rect\"),\n            ui.output_plot(\"plot_DFT\"),\n            ui.output_plot(\"plot_DTFT_DFT\")\n\n        ),\n    ),)\n\ndef server(input, output, session):\n\n    def prepare():\n        global f, N, n, x\n\n        # Read inputs\n        f = input.freq()\n        N = input.N()\n\n        # Create the signal\n        n = np.arange(N)\n        x = np.cos(2*np.pi*f*n)\n\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot_signal():\n        prepare()\n        fig = plt.figure(figsize=(6, 3))\n        plt.plot(x, '-o')\n        plt.title('The signal $x(t) = \\cos(2 \\pi f n)$')\n        plt.xlabel('Discrete time $n$')\n        plt.ylabel('Signal $x[n]$')\n        plt.show()\n\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot_DTFT_per():\n        prepare()\n\n        # Regenerate the signal so that it fits in one period\n        period = 1000*f\n        ninf = np.arange(period)\n        xinf = np.cos(2*np.pi*f*ninf)\n\n        # Compute the DTFT\n        Sinf = fft(xinf)\n\n        # Create the frequency axis\n        freqinf = np.linspace(fmin, fmax, len(Sinf))\n\n        # Plot the magnitude of the DTFT\n        plt.figure(figsize=(6, 3))\n        plt.title('DTFT of infinitely-long periodic signal')\n        plt.stem(freqinf, np.abs(Sinf), linefmt='b')\n        plt.xlabel('Frequency')\n        plt.ylabel('Magnitude')\n        plt.show()\n\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot_DTFT_rect():\n        prepare()\n\n        # Compute the DTFT\n        FFT_points = 10000*n.size\n        S1 = fft(x, FFT_points)\n\n        # Create the frequency axis\n        freq1 = np.linspace(fmin, fmax, len(S1))\n\n        # Plot the magnitude of the DTFT\n        plt.figure(figsize=(6, 3))\n        plt.title('DTFT of windowed signal')\n        plt.plot(freq1, np.abs(S1), 'b')\n        #plt.stem(freqinf, np.abs(Sinf), 'b')\n        plt.xlabel('Frequency')\n        plt.ylabel('Magnitude')\n        plt.show()\n\n\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot_DFT():\n        prepare()\n        \n        # Compute the DFT\n        S2 = fft(x)\n\n        # Create the frequency axis\n        freq2 = np.linspace(fmin, fmax, len(S2))\n        #freq2 = np.fft.fftfreq(x.size)\n\n        # Plot the magnitude of the DFT\n        plt.figure(figsize=(6, 3))\n        plt.title('Its DFT')\n        plt.stem(freq2, np.abs(S2), linefmt='ro')\n        plt.xlabel('Frequency')\n        plt.ylabel('Magnitude')\n        plt.show()\n\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot_DTFT_DFT():\n        prepare()\n\n        # Compute the DTFT\n        FFT_points = 10000*n.size\n        S1 = fft(x, FFT_points)\n        freq1 = np.linspace(fmin, fmax, len(S1))\n\n        # Compute the DFT\n        S2 = fft(x)\n\n        # Plot the DTFT and DFT overlaid\n        freq2 = np.linspace(fmin, fmax, len(S2)+1)\n        plt.figure(figsize=(6, 3))\n        plt.plot(freq1, np.abs(S1), 'b')\n        plt.stem(freq2[:-1], np.abs(S2), linefmt='ro')\n        plt.title('The DFT is just sampled from the DTFT')\n        plt.xlabel('Frequency')\n        plt.ylabel('Magnitude')\n        plt.show()        \napp = App(app_ui, server)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "Ex01_Sampling.html#exercise-1",
    "href": "Ex01_Sampling.html#exercise-1",
    "title": "4  Exercises 01: Sampling",
    "section": "4.1 Exercise 1",
    "text": "4.1 Exercise 1\nAre the following signals periodic? If yes, compute their period.\n\na). \\(x[n] = \\cos(\\pi \\frac{3}{10} n)\\)\nb). \\(x[n] = \\cos(7.2 \\pi n)\\)\nc). \\(x[n] = \\sin(3n)\\)\nd). \\(x[n] = \\sin(\\frac{\\pi n}{2}) + \\cos(\\frac{3 \\pi n}{4})\\)\n\n\nSolution\na). We want to find the smallest positive integer \\(N\\) such that \\(x[n] = x[n+N]\\), i.e. \\[\\begin{aligned}\n\\cos(\\pi \\frac{3}{10} n) &= \\cos(\\pi \\frac{3}{10} (n+N)) \\\\\n&= \\cos(\\pi \\frac{3}{10} n + \\pi \\frac{3}{10} N) \\\\\n\\end{aligned}\\]\nThis is true if the extraterm \\(\\pi \\frac{3}{10} N\\) is \\(2 \\pi k\\), i.e.: \\[\\begin{aligned}\n\\pi \\frac{3}{10} N &= 2 \\pi k \\\\\n\\frac{3}{10} N &= 2 k \\\\\nN &= \\frac{20}{3} k\n\\end{aligned}\\] with \\(k\\) integer. The smallest positive integer \\(N\\) is \\(N=20\\) (when \\(k=3\\)). Therefore the signal is periodic with period \\(N=20\\).\nb). We want to find the smallest positive integer \\(N\\) such that \\(x[n] = x[n+N]\\), i.e. \\[\\begin{aligned}\n\\cos(7.2 \\pi n) &= \\cos(7.2 \\pi (n+N)) \\\\\n&= \\cos(7.2 \\pi n + 7.2 \\pi N) \\\\\n\\end{aligned}\\]\nThis is true if \\(7.2 \\pi N = 2 \\pi k\\), i.e.: \\[\\begin{aligned}\n7.2 \\pi N &= 2 \\pi k \\\\\n3.6 N &= k \\\\\n\\end{aligned}\\] with \\(k\\) integer. The smallest positive integer \\(N\\) is \\(N=5\\).\nAn alternative way is to to treat this as a continuous signal and identify the frequency of the cosine: \\[\\begin{aligned}\n\\cos(7.2 \\pi n) &= \\cos(2 \\pi f n) \\\\\nf &= 3.6Hz\n\\end{aligned}\\] The period should be \\(N=\\frac{1}{f} = \\frac{1}{3.6} = \\frac{5}{18}\\), but since we need \\(N\\) to be an integer because our signal ia actually discrete, we consider the smallest integer multiple of this, which is: \\[N = \\frac{5}{18} \\cdot 18 = 5\\] Therefore the signal is periodic with period \\(N=5\\).\nc). We want to find the smallest positive integer \\(N\\) such that \\(x[n] = x[n+N]\\), i.e. \\[\\begin{aligned}\n\\sin(3 n) &= \\sin(3 (n+N)) \\\\\n&= \\sin(3 n + 3 N) \\\\\n\\end{aligned}\\]\nThis is true if \\(3 N = 2 \\pi k\\), i.e.: \\[\\begin{aligned}\n3 N &= 2 \\pi k \\\\\nN &= \\frac{2}{3} \\pi k \\\\\n\\end{aligned}\\] with \\(k\\) integer.\nThis is impossible, because \\(k\\) is an irrational number which means that multiplying and dividing it by the integer numbers 2, 3, \\(k\\) will never become an integer as we need \\(N\\) to be.\nTherefore the signal is not periodic.\nd). We want to find the smallest positive integer \\(N\\) such that \\(x[n] = x[n+N]\\), i.e. \\[\\begin{aligned}\n\\sin(\\frac{\\pi n}{2}) + \\cos(\\frac{3 \\pi n}{4}) &= \\sin(\\frac{\\pi}{2} (n+N)) + \\cos(\\frac{3 \\pi}{4} (n+N)) \\\\\n&= \\sin(\\frac{\\pi}{2} n + \\frac{\\pi}{2} N) + \\cos(\\frac{3 \\pi}{4} n + \\frac{3 \\pi}{4} N) \\\\\n\\end{aligned}\\]\nThis is true if \\(\\frac{\\pi}{2} N = 2 \\pi k\\) and \\(\\frac{3 \\pi}{4} N = 2 \\pi k'\\), i.e.: \\[\\begin{aligned}\n\\frac{\\pi}{2} N &= 2 \\pi k \\\\\n\\frac{3 \\pi}{4} N &= 2 \\pi k' \\\\\n\\end{aligned}\\] with \\(k\\), \\(k'\\) being integers.\nThis means: \\[\\begin{aligned}\nN &= 4 k \\\\\nN &= \\frac{8}{3} k' \\\\\n\\end{aligned}\\]\nThe smallest positive integer \\(N\\) is \\(N=8\\) (when \\(k=2\\) and \\(k'=3\\)). Therefore the signal is periodic with period \\(N=8\\)."
  },
  {
    "objectID": "Ex01_Sampling.html#exercise-2",
    "href": "Ex01_Sampling.html#exercise-2",
    "title": "4  Exercises 01: Sampling",
    "section": "4.2 Exercise 2",
    "text": "4.2 Exercise 2\nConsider the following signal: \\[x_a(t) = (1 + 0.5 cos(400 \\pi t)) \\cdot cos(8000 \\pi t)\\]\n\na). Compute the minimum sampling frequency necessary for avoiding alias;\nb). The signal is sampled with 8000Hz. Write the discrete signal obtained via sampling;\nc). Does alias occur? If yes, identify the frequencies in the signal which are aliased;\nd). What is the analog signal reconstructed from the samples via ideal D/A.reconstruction?\n\n\nSolution\na). Compute the minimum sampling frequency necessary for avoiding alias;\nThe minimum sampling frequency necessary for avoiding alias is the double of the maximum frequency in the signal, so we need to identify the maximum frequency in the signal.\nFor this we need to convert the multiplication of the two cosines into a sum of cosines, because a multiplication of two cosines produces a frequency which is higher than the starting frequencies.\nUsing the trigonometric identity: \\[\\begin{aligned}\n\\cos(\\alpha) \\cos(\\beta) &= \\frac{1}{2} \\left( \\cos(\\alpha - \\beta) + \\cos(\\alpha + \\beta) \\right)\n\\end{aligned}\\] we have: \\[\\begin{aligned}\nx_a(t) &= (1 + 0.5 \\cos(400 \\pi t)) \\cdot \\cos(8000 \\pi t) \\\\\n&=\\cos(8000 \\pi t) + 0.5 \\cos(8000 \\pi t) \\cos(400 \\pi t) \\\\\n&=\\cos(8000 \\pi t) + 0.5 \\frac{1}{2} \\left( \\cos(8000 \\pi t - 400 \\pi t) + \\cos(8000 \\pi t + 400 \\pi t) \\right) \\\\\n&=\\cos(8000 \\pi t) + 0.25 \\cos(7600 \\pi t) + 0.25 \\cos(8400 \\pi t) \\\\\n\\end{aligned}\\]\n\n\n\n\n\n\nFrequent error\n\n\n\nIf the signal is already given as a sum of sinusoidal components, we don’t need to do anything else, just leave it as it is.\n\n\nNext, we identify the frequencies in the signal, which are: \\[\\begin{aligned}\nf_1 &= 4000Hz \\\\\nf_2 &= 3800Hz \\\\\nf_3 &= 4200Hz \\\\\n\\end{aligned}\\]\n\n\n\nFrequencies in the signal\n\n\nThe minimum sampling frequency for avoiding alias is therefore twice the maximum frequency, which is \\(f_3 = 4200Hz\\), i.e.: \\[F_{s_{min}} = 2 \\cdot 4200Hz = 8400Hz\\]\nb). The signal is sampled with 8000Hz. Write the discrete signal obtained via sampling;\nSampling the signal amounts to applying the variable transformation \\(t = \\frac{n}{F_s}\\), i.e.: \\[\\begin{aligned}\nx[n] &= x_a(t) \\Big|_{t = \\frac{n}{F_s}} \\\\\n&= \\cos(8000 \\pi \\frac{n}{F_s}) + 0.25 \\cos(7600 \\pi \\frac{n}{F_s}) + 0.25 \\cos(8400 \\pi \\frac{n}{F_s}) \\\\\n&= \\cos(8000 \\pi \\frac{n}{8000}) + 0.25 \\cos(7600 \\pi \\frac{n}{8000}) + 0.25 \\cos(8400 \\pi \\frac{n}{8000}) \\\\\n&= \\cos(\\pi n) + 0.25 \\cos(\\frac{19}{20} \\pi n) + 0.25 \\cos(\\frac{21}{20} \\pi n) \\\\\n\\end{aligned}\\]\nc). Does alias occur? If yes, identify the frequencies in the signal which are aliased;\nThe sampling frequency is \\(F_s = 8000Hz\\), which is lower than required for avoiding alias of the third component. Therefore we expect the third component to be aliased, while the first and second, for which \\(F_s\\) is more than double, are not aliased.\nIndeed, let’s identify the frequencies in the discrete signal obtained: \\[\\begin{aligned}\n\\pi n = 2 \\pi f_1 n \\Rightarrow f_1 &= \\frac{1}{2} = 0.5 \\\\\n\\frac{19}{20} \\pi n = 2 \\pi f_2 n \\Rightarrow f_2 &= \\frac{19}{40} = 0.475 \\\\\n\\frac{21}{20} \\pi n = 2 \\pi f_3 n \\Rightarrow f_3 &= \\frac{21}{40} = 0.525 \\\\\n\\end{aligned}\\]\nWe have \\(f_1 < 0.5\\), \\(f_2 < 0.5\\), which means they are not aliased, and \\(f_3 > 0.5\\), which is aliased. The frequency \\(f_3\\) is aliased to: \\[f_3' = f_3 - 1 = 0.525 - 1 = -0.475 = -\\frac{19}{40}\\] which means that: \\[\\cos(2 \\pi \\frac{21}{40} n) = \\cos(- 2 \\pi \\frac{19}{40} n), \\forall n\\]\nd). What is the analog signal reconstructed from the samples via ideal D/A reconstruction?\nIdeal A/D reconstruction means that we need to apply the inverse variable transformation \\(n = t \\cdot F_s\\), but starting from the aliased frequencies in the signal, if any.\nWith the aliased frequency \\(f_3'\\), the discrete signal is: \\[x[n] = \\cos(\\pi n) + 0.25 \\cos(\\frac{19}{20} \\pi n) + 0.25 \\cos(-\\frac{19}{20} \\pi n)\\]\nThe analog signal reconstructed via ideal D/A reconstruction is: \\[\\begin{aligned}\nx_r(t) &= \\cos(\\pi \\cdot t \\cdot F_s) + 0.25 \\cos(\\frac{19}{20} \\pi \\cdot t \\cdot F_s) + 0.25 \\cos(-\\frac{19}{20} \\pi \\cdot t \\cdot F_s) \\\\\n&= \\cos(8000 \\pi t) + 0.25 \\cos(7600 \\pi t) + 0.25 \\cos(- 7600 \\pi t) \\\\\n&= \\cos(8000 \\pi t) + 0.25 \\cos(7600 \\pi t) + 0.25 \\cos(7600 \\pi t) \\\\\n&= \\cos(8000 \\pi t) + 0.5 \\cos(7600 \\pi t)\n\\end{aligned}\\]\nDue to aliasing, the reconstructed signal is not the same as the original signal."
  },
  {
    "objectID": "Ex02_Systems.html#exercise-1",
    "href": "Ex02_Systems.html#exercise-1",
    "title": "5  Exercises 02: Systems",
    "section": "5.1 Exercise 1",
    "text": "5.1 Exercise 1\nConsider the following discrete signal \\(x[n]\\): \\[x[n] =\n\\begin{cases}\n1 + \\frac{n}{3}, &-3 \\leq n \\leq -1\\\\\n1, &0 \\leq n \\leq 3\\\\\n0, &\\text{elsewhere}\n\\end{cases}\n\\]\n\n\nFind the values of \\(x[n]\\) and represent the signal graphically\n\n\nRepresent graphically the signal \\(x[-n + 4]\\)\n\n\nWrite the expression of \\(x[n]\\) based on the signal \\(\\delta[n]\\)\n\n\nWrite the expression of \\(x[n]\\) based on the signal \\(u[n]\\)\n\n\n\nSolution\na). Find the values of \\(x[n]\\) and represent the signal graphically\nGiving values for \\(n\\) in the range \\(-3 \\leq n \\leq 3\\), we obtain the following values for \\(x[n]\\): \\[x[n] = \\{..., 0, \\frac{1}{3}, \\frac{2}{3}, \\underuparrow{1}, 1, 1, 1, 0, ...\\}\\] The graphical representation of the signal is:\n\nb). Represent graphically the signal \\(x[-n + 4]\\)\nLet’s give a name to the signal \\(x[-n + 4]\\), say \\(a[n]\\). We have: \\[a[n] = x[-n + 4]\\]\nTo understand visually what this means, let’s compute a few values of \\(a[n]\\): \\[\\begin{aligned}\na[0]=x[-0+4] &= x[4] = 0 \\\\\na[1]=x[-1+4] &= x[3] = 1 \\\\\na[2]=x[-2+4] &= x[2] = 1 \\\\\n\\end{aligned}\\]\nWe have \\(x[4]\\) moving to \\(a[0]\\), \\(x[3]\\) moving to \\(a[1]\\), \\(x[2]\\) moving to \\(a[2]\\), which means that the signal \\(x[n]\\) is reversed and then shifted.\nWe can continue and extend the signal \\(a[n]\\) to the left and to the right, obtaining the full signal \\(a[n]\\): \\[a[n] = \\{..., \\underuparrow{0}, 1, 1, 1, 1, \\frac{2}{3}, \\frac{1}{3}, 0, ...\\}\\]\n\n\n\nThe signal \\(a[n] = x[-n + 4]\\)"
  }
]